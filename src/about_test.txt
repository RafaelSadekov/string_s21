strlen_1: Проверяет длину пустой строки. Ожидаемый результат - 0.
strlen_2: Проверяет длину строки "Hello". Ожидаемый результат - 5 символов.
strlen_3: Проверяет длину строки из одного символа "A". Ожидаемый результат - 1 символ.
strlen_4: Проверяет длину строки "This is a test.". Ожидаемый результат - 14 символов.
strlen_5: Проверяет длину строки с пробелами "Another test with spaces". Ожидаемый результат - 24 символа.
strlen_6: Проверяет длину строки, состоящей из цифр "1234567890". Ожидаемый результат - 10 символов.
strlen_7: Проверяет длину строки с символом новой строки. Ожидаемый результат - 13 символов.
strlen_8: Проверяет длину строки, начинающейся с нулевого символа. Ожидаемый результат - 0 символов.
strlen_9: Проверяет длину длинной строки. Ожидаемый результат - 39 символов.
strlen_10: Проверяет длину строки, заканчивающейся пробелом. Ожидаемый результат - 15 символов.

memcmp_compare_start: Проверяет идентичность первых 3 символов строк "Hello," и "Hello, World!". 
Это подтверждает, что функция корректно сравнивает начальные части строк, даже когда одна строка является префиксом другой.
memcmp_minimal_difference: Сравнивает две строки "1234" и "1235" на первых 4 символах, ожидая, что s21_memcmp вернет отрицательное значение, 
поскольку "1234" лексикографически меньше "1235" из-за различия в последнем символе. 
Этот тест проверяет способность функции обнаруживать различия в конце сравниваемого диапазона.
memcmp_identical_parts: Сравнивает два сегмента внутри одной и той же строки "SB SB SB $! ", начиная с 8-го символа и продолжая на следующие 4 символа. 
Этот тест проверяет, как функция обрабатывает сравнение смещенных сегментов внутри одной строки, 
что важно для алгоритмов, работающих с подстроками.
memcmp_case_sensitivity: Сравнивает строки "abcdef" и "abcDef" на первых 6 символах, ожидая, что функция вернет отрицательное значение. 
Этот тест подтверждает, что функция чувствительна к регистру символов и корректно определяет различия между ними.
memcmp_zero_chars: Проверяет идентичность строк "a\0b\0c\0" на первых 8 символах. Этот тест важен для подтверждения, 
что функция правильно сравнивает данные, содержащие нулевые символы в середине, не трактуя их как конец строки.

memchr_found: Проверяет, что функция возвращает корректный указатель на первое вхождение символа в строке, когда символ присутствует. 
Это подтверждает, что функция правильно находит символ в строке и возвращает ожидаемый результат.
memchr_not_found: Проверяет, что функция возвращает NULL, когда искомый символ отсутствует в диапазоне поиска. 
Этот тест гарантирует, что функция корректно обрабатывает случаи, когда символ не может быть найден в пределах указанного количества символов.
memchr_zero_length: Проверяет поведение функции при count = 0, ожидая возврат NULL, поскольку поиск не должен производиться в пустом диапазоне. 
Этот тест важен для проверки корректности обработки граничных условий.
memchr_first_char: Проверяет, что функция возвращает указатель на начало строки, если искомый символ является первым символом в строке. 
Этот тест подтверждает, что функция корректно идентифицирует символы в начале строки.
memchr_last_char: Проверяет, что функция корректно возвращает указатель на последний символ в строке, 
если искомый символ находится в конце диапазона поиска. Это демонстрирует способность функции обнаруживать символы в конце указанного диапазона.

memcpy_normal_string: Проверяет, что функция корректно копирует обычную строку, включая нуль-терминатор.
memcpy_without_overlap: Тестировать корректность копирования без учета перекрытия
memcpy_zero_bytes: Проверяет, что при попытке скопировать 0 байтов содержимое целевой области памяти не изменяется.
memcpy_large_data: Тестирование функции с большим объемом данных для проверки ее способности корректно обрабатывать такие случаи.
memcpy_binary_data: Убеждается, что функция способна корректно копировать бинарные данные, не интерпретируя их.

memset_basic_fill: Базовое заполнение Проверяет способность функции заполнять весь буфер заданным символом ('A'). Убеждается, что каждый байт в буфере равен этому символу после заполнения.
memset_zero_length: Заполнение нулевой длины Тестирует поведение функции при заполнении буфера нулевой длины. Проверяет, что содержимое буфера не изменяется, если указано заполнить 0 байтов.
memset_partial_fill: Заполнение части буфера Проверяет корректность заполнения только начальной части буфера, оставляя остальную часть неизменной. Это подтверждает, что функция правильно обрабатывает указанное количество байтов для заполнения.
memset_various_chars: Тестирует функцию с использованием разных символов для заполнения, включая нулевой символ и символ 'Z'. Проверяет, что функция универсально применяет любой символ в качестве аргумента для заполнения.
memset_large_buffer: Проверяет работу функции на больших объемах данных, убеждаясь, что она способна корректно заполнять большие буферы без ошибок и утечек памяти.

strchr_start: Проверяет, что функция корректно находит символ, находящийся в начале строки. Подтверждает, что возвращаемый указатель и содержимое строки с этого места соответствуют ожиданиям.
strchr_middle: Проверяет нахождение символа в середине строки. Убеждается, что функция возвращает правильный указатель и что последующая часть строки совпадает с ожидаемой.
strchr_not_found: Тестирует случай, когда искомый символ отсутствует в строке. Ожидается, что функция вернёт NULL.
strchr_null_char: Проверяет способность функции находить терминирующий нулевой символ строки. Этот тест подтверждает, что функция корректно обрабатывает конец строки.

strncmp_full_equal: Проверяет, что две полностью идентичные строки считаются равными, демонстрируя базовую функциональность s21_strncmp.
strncmp_partial_equal: Тестирует корректность частичного сравнения строк, когда только начальная часть строк должна быть сравнена. Это важно для ситуаций, когда только начало строк имеет значение.
strncmp_zero_length: Проверяет специальный случай, когда n=0, и ожидается, что любые строки будут считаться равными, так как сравнение не производится.
strncmp_length_exceeds: Тестирует поведение функции, когда значение n превышает длину обеих сравниваемых строк, подчёркивая обработку граничных условий.
strncmp_diff_length: Проверяет сценарий, когда строки различаются длиной, и первая строка короче второй. Полезно для проверки корректности сравнения строк разной длины.
strncmp_empty_vs_nonempty: Тестирует сравнение пустой и непустой строки с n=0, подтверждая, что при ну

strpbrk_found: Проверяет, что функция корректно находит первое вхождение одного из символов из str2 в str1 и возвращает правильный указатель на этот символ в str1.
strpbrk_not_found: Тестирует случай, когда ни один из символов из str2 не присутствует в str1, ожидая, что функция вернет NULL.
strpbrk_empty_str1: Проверяет поведение функции при работе с пустой строкой str1, ожидая возврат NULL, так как в пустой строке не может быть найдено никаких символов.
strpbrk_empty_str2: Тестирует, что функция возвращает NULL, когда str2 пуста, так как нет символов для поиска в str1.
strpbrk_long_str2: Проверяет случай, когда str2 содержит больше символов, чем str1, и подтверждает, что функция корректно находит первый символ из str1, присутствующий в str2.

strrchr_last_occurrence: Проверяет нахождение последнего вхождения символа 'c', демонстрируя, что функция возвращает правильный указатель на последний такой символ.
strrchr_not_present: Подтверждает, что функция возвращает NULL, если символ отсутствует в строке, что важно для проверки корректности обработки несуществующих символов.
strrchr_null_char: Тестирует поиск терминирующего нулевого символа, который всегда присутствует в конце строки, демонстрируя, что функция возвращает указатель на конец строки.
strrchr_empty_string: Проверяет поведение функции с пустой строкой, подтверждая, что возвращается NULL, так как в пустой строке не может быть найден ни один символ.
strrchr_only_char: Проверяет строку, состоящую из повторяющихся символов, и подтверждает, что функция возвращает указатель на последний символ в такой строке.

strstr_normal: Проверяет успешный поиск подстроки в строке.
strstr_not_found: Проверяет случай, когда подстрока не найдена.
strstr_empty_needle: Тестирует поиск пустой подстроки, ожидая возврат начала исходной строки.
strstr_all_empty: Проверяет работу функции с полностью пустыми строками.
strstr_partial_match: Проверяет возврат NULL при частичном совпадении подстроки, которое не является полным вхождением.
strstr_empty_haystack_nonempty_needle: Поиска подстроки в пустой строке.

strtok_basic: Проверка базового разбиения строки на токены с использованием стандартного набора разделителей.
strtok_no_delimiters: Последовательные вызовы для продолжения разбиения строки на токены, проверяя сохранение внутреннего состояния между вызовами.
strtok_empty_string: Проверка работы с разными наборами разделителей, включая случаи без разделителей в строке.
strtok_empty_delimiters: Разбиение пустой строки для проверки корректности возвращаемого значения.
strtok_consecutive_delimiters: Использование разнообразных строк и разделителей, включая пустые строки и строки без разделителей.